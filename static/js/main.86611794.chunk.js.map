{"version":3,"sources":["components/LabelledSlider.js","components/LabelledCheckBox.js","components/QuestionTable.js","Generator.js","App.js","serviceWorker.js","index.js"],"names":["LabelledSlider","props","marks","Array","max","keys","map","value","label","toString","Typography","id","gutterBottom","Slider","defaultValue","aria-labelledby","step","valueLabelDisplay","min","onChange","event","LabelledCheckBox","FormControlLabel","control","Checkbox","name","color","defaultChecked","labelPlacement","checked","useStyles","makeStyles","table","tableLayout","QuestionTable","classes","variant","align","Table","className","TableBody","rows","row","TableRow","key","TableCell","sum1","sum2","sum3","randBetween","Math","round","random","generateRandomAdditionSum","createRow","rowNumber","generateRows","useAddition","i","push","GlobalCss","withStyles","backgroundColor","padding","App","useState","numberBond","setNumberBond","setUseAddition","setRows","useEffect","Container","maxWidth","Grid","container","spacing","item","xs","Paper","changedNumberBond","direction","justify","additionUse","console","log","Button","endIcon","Icon","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86611794.chunk.js","sourcesContent":["import {Slider, Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const LabelledSlider = (props) =>\n{\n    const marks = [...Array(props.max +1).keys()].map((value) => ({value: value, label: value.toString()}))\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                defaultValue={props.defaultValue}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={0}\n                max={props.max}\n                marks={marks}\n                onChange={\n                        (event, value) => {\n                            props.onChange(value)\n                    }\n                }\n            />\n        </>\n    )\n}","import React from 'react';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\n\nexport const LabelledCheckBox = (props) => {\n    return (\n        <>\n            <FormControlLabel\n                control={<Checkbox name={props.name} color={props.color} defaultChecked={props.defaultChecked} />}\n                label={props.name}\n                labelPlacement=\"start\"\n                onChange={(event, checked) => props.onChange(!checked)}\n            />\n        </>\n    );\n};\n","import {Table, TableBody, TableCell, TableRow, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n    table: {\n        tableLayout: 'fixed'\n    }\n}));\n\nexport const QuestionTable = (props) =>\n{\n    const classes = useStyles();\n    return (\n        <>\n            <Typography variant=\"h2\" id=\"discrete-slider-custom\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table className={classes.table}>\n                <TableBody>\n                    {props.rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"right\">{row.sum1}</TableCell>\n                            <TableCell align=\"right\">{row.sum2}</TableCell>\n                            <TableCell align=\"right\">{row.sum3}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    )\n}","const randBetween = (min, max) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nconst generateRandomAdditionSum = (min, max) => {\n    return `${randBetween(min, max)} + ${randBetween(min, max)} = ___`;\n};\n\nconst createRow = (min, max, rowNumber) => ({\n    key: rowNumber,\n    sum1: generateRandomAdditionSum(min, max),\n    sum2: generateRandomAdditionSum(min, max),\n    sum3: generateRandomAdditionSum(min, max),\n});\n\nexport const generateRows = (min, max, useAddition) => {\n    const rows = [];\n    for (let i = 0; i <= 10; i++) {\n        rows.push(createRow(min, max, i));\n    }\n    return rows;\n};\n","import React, { useEffect, useState } from 'react';\nimport './reset.css';\nimport Button from '@material-ui/core/Button';\nimport { Container, Grid, Icon, Paper, Typography } from '@material-ui/core';\nimport { LabelledSlider } from './components/LabelledSlider';\nimport { LabelledCheckBox } from './components/LabelledCheckBox';\nimport { QuestionTable } from './components/QuestionTable';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { generateRows } from './Generator';\n\nconst GlobalCss = withStyles({\n    '@global': {\n        'html, body': {\n            backgroundColor: '#f5f5f5',\n        },\n    },\n})(() => null);\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const min = 0;\n    const [numberBond, setNumberBond] = useState(10);\n    const [useAddition, setUseAddition] = useState(true);\n    const [rows, setRows] = useState([]);\n\n    const updateNumberBond = (changedNumberBond) => {\n        setNumberBond(changedNumberBond);\n    };\n\n    const updateAdditionUse = (additionUse) => {\n        // TODO this gives the incorrect value the first click\n        console.log(`useAddition was ${useAddition}`);\n        setUseAddition(additionUse);\n    };\n\n    useEffect(() => {\n        setRows(generateRows(min, numberBond, useAddition));\n    }, [min, numberBond, useAddition]);\n\n    return (\n        <div className=\"App\">\n            <GlobalCss />\n            <header className=\"App-header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.control}>\n                            <Grid item>\n                                <LabelledSlider\n                                    label=\"Number Bond\"\n                                    max={10}\n                                    defaultValue={numberBond}\n                                    step={1}\n                                    onChange={updateNumberBond}\n                                />\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox\n                                    name=\"addition\"\n                                    color=\"primary\"\n                                    defaultChecked={true}\n                                    onChange={updateAdditionUse}\n                                />\n                            </Paper>\n                        </Grid>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox name=\"subtraction\" color=\"primary\" />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <Grid item />\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                endIcon={<Icon>send</Icon>}\n                                onClick={() => {\n                                    setRows(generateRows(min, numberBond, useAddition));\n                                }}\n                            >\n                                Generate maths fun!\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <QuestionTable label=\"Questions\" rows={rows} />\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}