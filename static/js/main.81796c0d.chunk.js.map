{"version":3,"sources":["components/Operations.ts","components/LabelledSlider.tsx","components/LabelledCheckBox.tsx","components/QuestionTable.tsx","customErrors/CustomeErrors.ts","components/OperandsGenerator.ts","components/Generator.ts","App.tsx","serviceWorker.js","index.js"],"names":["Operations","LabelledSlider","props","marks","Array","max","min","keys","filter","key","map","value","label","toString","Typography","id","gutterBottom","Slider","aria-labelledby","step","valueLabelDisplay","onChange","event","LabelledCheckBox","FormControlLabel","control","Checkbox","name","color","checked","labelPlacement","useStyles","makeStyles","table","tableLayout","QuestionTable","classes","variant","align","Table","className","TableBody","rows","row","TableRow","TableCell","sums","NotImplementedError","message","Error","pickOperation","operations","Math","floor","random","length","randBetween","round","createOperations","generateProps","useAddition","push","Addition","useSubtraction","Subtraction","generateAPlusOrMinusBEqualsX","useExactNumberBonds","operation","a","numberBond","b","x","generateRows","numberOfRows","numSumsForWholeGrid","operandsArray","j","sumsArray","operand","operands","uniqueSumsArray","Set","uniqueSumPosition","i","slice","GlobalCss","withStyles","backgroundColor","padding","initialState","App","useState","setNumberBond","setUseExactNumberBonds","setNumberRows","setUseAddition","setUseSubtraction","setRows","useEffect","data-testid","Container","maxWidth","Grid","container","spacing","item","xs","Paper","changedNumberBond","alignItems","exactNumberBondsUse","TextField","type","changedNumberRows","num","parseInt","updateNumberRows","target","direction","justify","additionUse","subtractionUse","Button","endIcon","Icon","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.81796c0d.chunk.js","sourcesContent":["enum Operations {\n    Addition = '+',\n    Subtraction = '-',\n}\n\nexport { Operations };\n","import { Slider, Typography } from '@material-ui/core';\nimport React from 'react';\n\ninterface LabelledSliderProps {\n    min: number;\n    max: number;\n    label: string;\n    value: number;\n    step: number;\n    onChange(amount: number): void;\n}\n\nexport const LabelledSlider = (props: LabelledSliderProps) => {\n    const marks = [...Array(props.max - props.min + 2).keys()]\n        .filter((key) => key >= props.min)\n        .map((value) => ({\n            value: value,\n            label: value.toString(),\n        }));\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                value={props.value}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={props.min}\n                max={props.max}\n                marks={marks}\n                onChange={(event, value) => {\n                    props.onChange(value as number);\n                }}\n            />\n        </>\n    );\n};\n","import React from 'react';\nimport { Checkbox, CheckboxProps, FormControlLabel } from '@material-ui/core';\n\ninterface LabelledCheckBoxProps {\n    name: string;\n    color: CheckboxProps['color'];\n    value: boolean;\n    onChange(checked: boolean): void;\n}\nexport const LabelledCheckBox = (props: LabelledCheckBoxProps) => {\n    return (\n        <>\n            <FormControlLabel\n                control={<Checkbox name={props.name} color={props.color} checked={props.value} />}\n                label={props.name}\n                labelPlacement=\"end\"\n                onChange={(event, checked) => props.onChange(checked)}\n            />\n        </>\n    );\n};\n","import { Table, TableBody, TableCell, TableRow, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Row } from './Generator';\n\nconst useStyles = makeStyles(() => ({\n    table: {\n        tableLayout: 'fixed',\n    },\n}));\n\ninterface QuestionTableProps {\n    label: string;\n    rows: Row[];\n}\n\nexport const QuestionTable = (props: QuestionTableProps) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Typography variant=\"h4\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table className={classes.table}>\n                <TableBody>\n                    {props.rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"center\">{row.sums[0]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[1]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[2]}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    );\n};\n","class NotImplementedError extends Error {\n    constructor(message: string) {\n        super(`Not implemented yet: ${message}`);\n        this.name = 'NotImplementedError';\n    }\n}\n\nexport { NotImplementedError };\n","import { Operations } from './Operations';\nimport { GenerateProps } from './Generator';\nimport { NotImplementedError } from '../customErrors/CustomeErrors';\n\ntype Answer = '___';\ntype NumberOrAnswer = number | Answer;\n\ninterface Operands {\n    a: NumberOrAnswer;\n    operation: Operations;\n    b: NumberOrAnswer;\n    x: NumberOrAnswer;\n}\n\nconst pickOperation = (operations: Operations[]) => {\n    return operations[Math.floor(Math.random() * operations.length)];\n};\n\nconst randBetween = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nfunction createOperations(generateProps: GenerateProps) {\n    const operations = [];\n    if (generateProps.useAddition) {\n        operations.push(Operations.Addition);\n    }\n    if (generateProps.useSubtraction) {\n        operations.push(Operations.Subtraction);\n    }\n    return operations;\n}\n\nconst generateAPlusOrMinusBEqualsX = (generateProps: GenerateProps): Operands => {\n    if (generateProps.useExactNumberBonds) {\n        const operation = pickOperation(createOperations(generateProps));\n        if (operation === Operations.Subtraction) {\n            const a = generateProps.numberBond;\n            const b = randBetween(generateProps.min, generateProps.numberBond);\n            return { a, operation, b, x: '___' };\n        }\n        if (operation === Operations.Addition) {\n            const a = randBetween(generateProps.min, generateProps.numberBond);\n            const b = generateProps.numberBond - a;\n            return { a, operation, b, x: '___' };\n        }\n        throw new NotImplementedError(operation);\n    }\n    const a = randBetween(generateProps.min, generateProps.numberBond);\n    const operation = pickOperation(createOperations(generateProps));\n    const b =\n        operation === Operations.Addition\n            ? randBetween(generateProps.min, generateProps.numberBond - a)\n            : randBetween(0, a);\n    return { a, operation, b, x: '___' };\n};\n\nexport type { Operands };\nexport { generateAPlusOrMinusBEqualsX, randBetween, pickOperation };\n","import { generateAPlusOrMinusBEqualsX, Operands } from './OperandsGenerator';\n\nconst numberOfColumns = 3;\nconst generationFactorForUniqueness = 4;\n\ninterface Row {\n    key: number;\n    sums: string[];\n}\n\ninterface GenerateProps {\n    min: number;\n    numberBond: number;\n    useAddition: boolean;\n    useSubtraction: boolean;\n    useExactNumberBonds?: boolean;\n}\n\nconst transformOperandsIntoSum = (operands: Operands) =>\n    `${operands.a} ${operands.operation} ${operands.b} = ${operands.x}`;\n\nconst generateRows = (generateProps: GenerateProps, numberOfRows: number): Row[] => {\n    if (!generateProps.useSubtraction && !generateProps.useAddition) {\n        return [];\n    }\n\n    const numSumsForWholeGrid = numberOfRows * numberOfColumns;\n    let operandsArray: Operands[] = [];\n    for (let j = 0; j < numSumsForWholeGrid * generationFactorForUniqueness; j++) {\n        operandsArray.push(generateAPlusOrMinusBEqualsX(generateProps));\n    }\n    const sumsArray: string[] = operandsArray.map<string>((operand) => {\n        return transformOperandsIntoSum(operand);\n    });\n\n    const uniqueSumsArray: string[] = [...new Set<string>(sumsArray)];\n    const rows = [];\n    let uniqueSumPosition = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n        if (uniqueSumPosition > uniqueSumsArray.length) {\n            break;\n        }\n        rows.push({ key: i, sums: uniqueSumsArray.slice(uniqueSumPosition, uniqueSumPosition + numberOfColumns) });\n        uniqueSumPosition += numberOfColumns;\n    }\n\n    return rows;\n};\n\nexport type { GenerateProps, Row };\nexport { generateRows };\n","import React, { useEffect, useState } from 'react';\nimport './reset.css';\nimport Button from '@material-ui/core/Button';\nimport { Container, Grid, Icon, Paper, TextField, Typography } from '@material-ui/core';\nimport { LabelledSlider } from './components/LabelledSlider';\nimport { LabelledCheckBox } from './components/LabelledCheckBox';\nimport { QuestionTable } from './components/QuestionTable';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { generateRows } from './components/Generator';\n\nconst GlobalCss = withStyles({\n    '@global': {\n        'html, body': {\n            // TODO how do I use the theme for this color? backgroundColor: theme.palette.background.paper\n            backgroundColor: '#f5f5f5',\n        },\n    },\n})(() => null);\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nconst initialState = {\n    numberBonds: 10,\n    useExactNumberBonds: true,\n    numberOfRows: 5,\n    useAddition: true,\n    useSubtraction: true,\n};\n\nconst maxNumberBonds = 20;\n\nfunction App() {\n    const classes = useStyles();\n    const min = 0;\n    const [numberBond, setNumberBond] = useState(initialState.numberBonds);\n    const [useExactNumberBonds, setUseExactNumberBonds] = useState(initialState.useExactNumberBonds);\n    const [numberOfRows, setNumberRows] = useState(initialState.numberOfRows);\n    const [useAddition, setUseAddition] = useState(initialState.useAddition);\n    const [useSubtraction, setUseSubtraction] = useState(initialState.useSubtraction);\n    const [rows, setRows] = useState(\n        generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows)\n    );\n\n    const updateNumberBond = (changedNumberBond: number) => {\n        setNumberBond(changedNumberBond);\n    };\n    const updateNumberRows = (changedNumberRows: string) => {\n        const num = parseInt(changedNumberRows);\n        setNumberRows(num);\n    };\n    const updateUseExactNumberBonds = (exactNumberBondsUse: boolean) => {\n        setUseExactNumberBonds(exactNumberBondsUse);\n    };\n    const updateAdditionUse = (additionUse: boolean) => {\n        setUseAddition(additionUse);\n    };\n    const updateSubtractionUse = (subtractionUse: boolean) => {\n        setUseSubtraction(subtractionUse);\n    };\n\n    useEffect(() => {\n        setRows(generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows));\n    }, [min, numberBond, numberOfRows, useAddition, useSubtraction, useExactNumberBonds]);\n\n    return (\n        <div className=\"App\">\n            <GlobalCss />\n            <header className=\"App-header\" data-testid=\"header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.control}>\n                            <Grid item>\n                                <LabelledSlider\n                                    label=\"Number Bonds\"\n                                    min={1}\n                                    max={maxNumberBonds}\n                                    value={numberBond}\n                                    step={1}\n                                    onChange={updateNumberBond}\n                                />\n                            </Grid>\n                            <Grid container alignItems={'center'}>\n                                <Grid item>\n                                    <LabelledCheckBox\n                                        name=\"Use exact Number Bonds\"\n                                        color=\"primary\"\n                                        value={useExactNumberBonds}\n                                        onChange={updateUseExactNumberBonds}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"number of rows\"\n                                        variant=\"outlined\"\n                                        value={numberOfRows}\n                                        onChange={(event) => updateNumberRows(event.target.value)}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox\n                                    name=\"addition\"\n                                    color=\"primary\"\n                                    value={useAddition}\n                                    onChange={updateAdditionUse}\n                                />\n                            </Paper>\n                        </Grid>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox\n                                    name=\"subtraction\"\n                                    color=\"primary\"\n                                    value={useSubtraction}\n                                    onChange={updateSubtractionUse}\n                                />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <Grid item />\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                endIcon={<Icon>refresh</Icon>}\n                                onClick={() => {\n                                    setRows(\n                                        generateRows(\n                                            { min, numberBond, useAddition, useSubtraction, useExactNumberBonds },\n                                            numberOfRows\n                                        )\n                                    );\n                                }}\n                            >\n                                Generate another worksheet\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Paper>\n                            <QuestionTable label=\"Worksheet\" rows={rows} />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}