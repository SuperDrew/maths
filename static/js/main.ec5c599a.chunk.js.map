{"version":3,"sources":["components/Operations.ts","components/LabelledSlider.tsx","components/LabelledCheckBox.tsx","components/QuestionTable.tsx","customErrors/CustomeErrors.ts","components/OperandsGenerator.ts","components/Generator.ts","App.tsx","serviceWorker.js","index.js"],"names":["Operations","LabelledSlider","props","marks","Array","max","keys","map","value","label","toString","Typography","id","gutterBottom","Slider","aria-labelledby","step","valueLabelDisplay","min","onChange","event","LabelledCheckBox","FormControlLabel","control","Checkbox","name","color","checked","labelPlacement","useStyles","makeStyles","table","tableLayout","QuestionTable","classes","variant","align","Table","className","TableBody","rows","row","TableRow","key","TableCell","sums","NotImplementedError","message","Error","pickOperation","operations","Math","floor","random","length","randBetween","round","createOperations","generateProps","useAddition","push","Addition","useSubtraction","Subtraction","generateRandomSum","useExactNumberBonds","operation","a","numberBond","b","x","generateAPlusOrMinusBEqualsX","generateSums","generateRow","rowNumber","generateRows","numberOfRows","i","GlobalCss","withStyles","backgroundColor","padding","App","useState","setNumberBond","setUseExactNumberBonds","setUseAddition","setUseSubtraction","setRows","useEffect","data-testid","Container","maxWidth","Grid","container","spacing","item","xs","Paper","changedNumberBond","exactNumberBondsUse","direction","justify","additionUse","subtractionUse","Button","endIcon","Icon","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0LAAKA,E,yHCWQC,EAAiB,SAACC,GAC3B,IAAMC,EAAQ,YAAIC,MAAMF,EAAMG,IAAM,GAAGC,QAAQC,KAAI,SAACC,GAAD,MAAY,CAAEA,MAAOA,EAAOC,MAAOD,EAAME,eAE5F,OACI,oCACI,kBAACC,EAAA,EAAD,CAAYC,GAAG,yBAAyBC,cAAY,GAC/CX,EAAMO,OAEX,kBAACK,EAAA,EAAD,CACIF,GAAIV,EAAMO,MACVD,MAAON,EAAMM,MACbO,kBAAgB,yBAChBC,KAAMd,EAAMc,KACZC,kBAAkB,MAClBC,IAAK,EACLb,IAAKH,EAAMG,IACXF,MAAOA,EACPgB,SAAU,SAACC,EAAOZ,GACdN,EAAMiB,SAASX,Q,gBCpBtBa,EAAmB,SAACnB,GAC7B,OACI,oCACI,kBAACoB,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUC,KAAMvB,EAAMuB,KAAMC,MAAOxB,EAAMwB,MAAOC,QAASzB,EAAMM,QACxEC,MAAOP,EAAMuB,KACbG,eAAe,QACfT,SAAU,SAACC,EAAOO,GAAR,OAAoBzB,EAAMiB,SAASQ,Q,wCCXvDE,EAAYC,aAAW,iBAAO,CAChCC,MAAO,CACHC,YAAa,aASRC,EAAgB,SAAC/B,GAC1B,IAAMgC,EAAUL,IAChB,OACI,oCACI,kBAAClB,EAAA,EAAD,CAAYwB,QAAQ,KAAKtB,cAAY,EAACuB,MAAM,UACvClC,EAAMO,OAEX,kBAAC4B,EAAA,EAAD,CAAOC,UAAWJ,EAAQH,OACtB,kBAACQ,EAAA,EAAD,KACKrC,EAAMsC,KAAKjC,KAAI,SAACkC,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAIE,KACf,kBAACC,EAAA,EAAD,CAAWR,MAAM,UAAUK,EAAII,KAAK,IACpC,kBAACD,EAAA,EAAD,CAAWR,MAAM,UAAUK,EAAII,KAAK,IACpC,kBAACD,EAAA,EAAD,CAAWR,MAAM,UAAUK,EAAII,KAAK,Y,0BH7B3D7C,K,aAAAA,E,iBAAAA,M,yCIAC8C,E,kDACF,WAAYC,GAAkB,IAAD,8BACzB,6CAA8BA,KACzBtB,KAAO,sBAFa,E,sBADCuB,QCc5BC,EAAgB,SAACC,GACnB,OAAOA,EAAWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAWI,UAGtDC,EAAc,SAACrC,EAAab,GAC9B,OAAO8C,KAAKK,MAAML,KAAKE,UAAYhD,EAAMa,GAAOA,IAGpD,SAASuC,EAAiBC,GACtB,IAAMR,EAAa,GAOnB,OANIQ,EAAcC,aACdT,EAAWU,KAAK5D,EAAW6D,UAE3BH,EAAcI,gBACdZ,EAAWU,KAAK5D,EAAW+D,aAExBb,EAGX,IC/BMc,EAAoB,SAACN,GAAkC,IAAD,ED+BvB,SAACA,GAClC,GAAIA,EAAcO,oBAAqB,CACnC,IAAMC,EAAYjB,EAAcQ,EAAiBC,IACjD,GAAIQ,IAAclE,EAAW+D,YAGzB,MAAO,CAAEI,EAFCT,EAAcU,WAEZF,YAAWG,EADbd,EAAYG,EAAcxC,IAAKwC,EAAcU,YAC7BE,EAAG,OAEjC,GAAIJ,IAAclE,EAAW6D,SAAU,CACnC,IAAMM,EAAIZ,EAAYG,EAAcxC,IAAKwC,EAAcU,YAEvD,MAAO,CAAED,IAAGD,YAAWG,EADbX,EAAcU,WAAaD,EACXG,EAAG,OAEjC,MAAM,IAAIxB,EAAoBoB,GAElC,IAAMC,EAAIZ,EAAYG,EAAcxC,IAAKwC,EAAcU,YACjDF,EAAYjB,EAAcQ,EAAiBC,IAKjD,MAAO,CAAES,IAAGD,YAAWG,EAHnBH,IAAclE,EAAW6D,SACnBN,EAAYG,EAAcxC,IAAKwC,EAAcU,WAAaD,GAC1DZ,EAAY,EAAGY,GACCG,EAAG,OCnDEC,CAA6Bb,GAApDS,EADgD,EAChDA,EAAGD,EAD6C,EAC7CA,UAAWG,EADkC,EAClCA,EAAGC,EAD+B,EAC/BA,EACzB,MAAM,GAAN,OAAUH,EAAV,YAAeD,EAAf,YAA4BG,EAA5B,cAAmCC,IAQjCE,EAAe,SAACd,GAAD,MAAkC,CACnDM,EAAkBN,GAClBM,EAAkBN,GAClBM,EAAkBN,KAGhBe,EAAc,SAACf,EAA8BgB,GAA/B,MAA2D,CAC3E/B,IAAK+B,EACL7B,KAAM2B,EAAad,KAWjBiB,EAAe,SAACjB,EAA8BkB,GAChD,IAAKlB,EAAcI,iBAAmBJ,EAAcC,YAChD,MAAO,GAGX,IADA,IAAMnB,EAAO,GACJqC,EAAI,EAAGA,EAAID,EAAcC,IAC9BrC,EAAKoB,KAAKa,EAAYf,EAAemB,IAEzC,OAAOrC,GC7BLsC,EAAYC,YAAW,CACzB,UAAW,CACP,aAAc,CAEVC,gBAAiB,aAJXD,EAOf,kBAAM,QAEHlD,EAAYC,aAAW,iBAAO,CAChCP,QAAS,CACL0D,QAAS,QAqHFC,MAjHf,WACI,IAAMhD,EAAUL,IADL,EAIyBsD,mBAAS,IAJlC,mBAIJf,EAJI,KAIQgB,EAJR,OAK2CD,oBAAS,GALpD,mBAKJlB,EALI,KAKiBoB,EALjB,OAM2BF,oBAAS,GANpC,mBAMJxB,EANI,KAMS2B,EANT,OAOiCH,oBAAS,GAP1C,mBAOJrB,EAPI,KAOYyB,EAPZ,OAQaJ,mBACpBR,EAAa,CAAEzD,IAPP,EAOYkD,aAAYT,cAAaG,iBAAgBG,uBAN5C,KAHV,mBAQJzB,EARI,KAQEgD,EARF,KA6BX,OAJAC,qBAAU,WACND,EAAQb,EAAa,CAAEzD,IAxBf,EAwBoBkD,aAAYT,cAAaG,iBAAgBG,uBAvBpD,OAwBlB,CAzBS,EAyBHG,EAAYT,EAAaG,EAAgBG,IAG9C,yBAAK3B,UAAU,OACX,kBAACwC,EAAD,MACA,4BAAQxC,UAAU,aAAaoD,cAAY,UACvC,kBAAC/E,EAAA,EAAD,CAAYwB,QAAQ,KAAKC,MAAM,UAA/B,UAIJ,kBAACuD,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAO5D,UAAWJ,EAAQX,SACtB,kBAACsE,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,EAAD,CACIvF,MAAM,eACNJ,IAAK,GACLG,MAAO4D,EACPpD,KAAM,EACNG,SAnCP,SAACgF,GACtBf,EAAce,OAqCM,kBAACN,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,EAAD,CACIvE,KAAK,mBACLC,MAAM,UACNlB,MAAOyD,EACP9C,SAxCE,SAACiF,GAC/Bf,EAAuBe,SA4CX,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAACO,UAAU,MAAMC,QAAQ,SAASP,QAAS,GACtD,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACE,EAAA,EAAD,CAAO5D,UAAWJ,EAAQX,SACtB,kBAAC,EAAD,CACIE,KAAK,WACLC,MAAM,UACNlB,MAAOmD,EACPxC,SAjDN,SAACoF,GACvBjB,EAAeiB,QAoDC,kBAACV,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACE,EAAA,EAAD,CAAO5D,UAAWJ,EAAQX,SACtB,kBAAC,EAAD,CACIE,KAAK,cACLC,MAAM,UACNlB,MAAOsD,EACP3C,SAxDH,SAACqF,GAC1BjB,EAAkBiB,SA4DN,kBAACX,EAAA,EAAD,CAAMG,MAAI,IACV,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACO,UAAU,MAAMC,QAAQ,SAASP,QAAS,GACtD,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACS,EAAA,EAAD,CACItE,QAAQ,YACRT,MAAM,UACNgF,QAAS,kBAACC,EAAA,EAAD,aACTC,QAAS,WACLpB,EACIb,EACI,CAAEzD,IA1F9B,EA0FmCkD,aAAYT,cAAaG,iBAAgBG,uBAzFnE,OAkFG,yBAiBR,kBAAC4B,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACE,EAAA,EAAD,KACI,kBAAC,EAAD,CAAezF,MAAM,YAAY+B,KAAMA,UCrH/CqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/E,c","file":"static/js/main.ec5c599a.chunk.js","sourcesContent":["enum Operations {\n    Addition = '+',\n    Subtraction = '-',\n}\n\nexport { Operations };\n","import { Slider, Typography } from '@material-ui/core';\nimport React from 'react';\n\ninterface LabelledSliderProps {\n    max: number;\n    label: string;\n    value: number;\n    step: number;\n    onChange(amount: number): void;\n}\n\nexport const LabelledSlider = (props: LabelledSliderProps) => {\n    const marks = [...Array(props.max + 1).keys()].map((value) => ({ value: value, label: value.toString() }));\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                value={props.value}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={0}\n                max={props.max}\n                marks={marks}\n                onChange={(event, value) => {\n                    props.onChange(value as number);\n                }}\n            />\n        </>\n    );\n};\n","import React from 'react';\nimport { Checkbox, CheckboxProps, FormControlLabel } from '@material-ui/core';\n\ninterface LabelledCheckBoxProps {\n    name: string;\n    color: CheckboxProps['color'];\n    value: boolean;\n    onChange(checked: boolean): void;\n}\nexport const LabelledCheckBox = (props: LabelledCheckBoxProps) => {\n    return (\n        <>\n            <FormControlLabel\n                control={<Checkbox name={props.name} color={props.color} checked={props.value} />}\n                label={props.name}\n                labelPlacement=\"start\"\n                onChange={(event, checked) => props.onChange(checked)}\n            />\n        </>\n    );\n};\n","import { Table, TableBody, TableCell, TableRow, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Row } from './Generator';\n\nconst useStyles = makeStyles(() => ({\n    table: {\n        tableLayout: 'fixed',\n    },\n}));\n\ninterface QuestionTableProps {\n    label: string;\n    rows: Row[];\n}\n\nexport const QuestionTable = (props: QuestionTableProps) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Typography variant=\"h4\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table className={classes.table}>\n                <TableBody>\n                    {props.rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"center\">{row.sums[0]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[1]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[2]}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    );\n};\n","class NotImplementedError extends Error {\n    constructor(message: string) {\n        super(`Not implemented yet: ${message}`);\n        this.name = 'NotImplementedError';\n    }\n}\n\nexport { NotImplementedError };\n","import { Operations } from './Operations';\nimport { GenerateProps } from './Generator';\nimport { NotImplementedError } from '../customErrors/CustomeErrors';\n\ntype Answer = '___';\ntype numberOrAnswer = number | Answer;\n\ninterface Operands {\n    a: numberOrAnswer;\n    operation: Operations;\n    b: numberOrAnswer;\n    x: numberOrAnswer;\n}\n\nconst pickOperation = (operations: Operations[]) => {\n    return operations[Math.floor(Math.random() * operations.length)];\n};\n\nconst randBetween = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nfunction createOperations(generateProps: GenerateProps) {\n    const operations = [];\n    if (generateProps.useAddition) {\n        operations.push(Operations.Addition);\n    }\n    if (generateProps.useSubtraction) {\n        operations.push(Operations.Subtraction);\n    }\n    return operations;\n}\n\nconst generateAPlusOrMinusBEqualsX = (generateProps: GenerateProps): Operands => {\n    if (generateProps.useExactNumberBonds) {\n        const operation = pickOperation(createOperations(generateProps));\n        if (operation === Operations.Subtraction) {\n            const a = generateProps.numberBond;\n            const b = randBetween(generateProps.min, generateProps.numberBond);\n            return { a, operation, b, x: '___' };\n        }\n        if (operation === Operations.Addition) {\n            const a = randBetween(generateProps.min, generateProps.numberBond);\n            const b = generateProps.numberBond - a;\n            return { a, operation, b, x: '___' };\n        }\n        throw new NotImplementedError(operation);\n    }\n    const a = randBetween(generateProps.min, generateProps.numberBond);\n    const operation = pickOperation(createOperations(generateProps));\n    const b =\n        operation === Operations.Addition\n            ? randBetween(generateProps.min, generateProps.numberBond - a)\n            : randBetween(0, a);\n    return { a, operation, b, x: '___' };\n};\n\nexport type { Operands };\nexport { generateAPlusOrMinusBEqualsX, randBetween, pickOperation };\n","import { generateAPlusOrMinusBEqualsX } from './OperandsGenerator';\n\nconst generateRandomSum = (generateProps: GenerateProps) => {\n    const { a, operation, b, x } = generateAPlusOrMinusBEqualsX(generateProps);\n    return `${a} ${operation} ${b} = ${x}`;\n};\n\nexport interface Row {\n    key: number;\n    sums: string[];\n}\n\nconst generateSums = (generateProps: GenerateProps) => [\n    generateRandomSum(generateProps),\n    generateRandomSum(generateProps),\n    generateRandomSum(generateProps),\n];\n\nconst generateRow = (generateProps: GenerateProps, rowNumber: number): Row => ({\n    key: rowNumber,\n    sums: generateSums(generateProps),\n});\n\ninterface GenerateProps {\n    min: number;\n    numberBond: number;\n    useAddition: boolean;\n    useSubtraction: boolean;\n    useExactNumberBonds?: boolean;\n}\n\nconst generateRows = (generateProps: GenerateProps, numberOfRows: number): Row[] => {\n    if (!generateProps.useSubtraction && !generateProps.useAddition) {\n        return [];\n    }\n    const rows = [];\n    for (let i = 0; i < numberOfRows; i++) {\n        rows.push(generateRow(generateProps, i));\n    }\n    return rows;\n};\n\nexport type { GenerateProps };\nexport { generateRows };\n","import React, { useEffect, useState } from 'react';\nimport './reset.css';\nimport Button from '@material-ui/core/Button';\nimport { Container, Grid, Icon, Paper, Typography } from '@material-ui/core';\nimport { LabelledSlider } from './components/LabelledSlider';\nimport { LabelledCheckBox } from './components/LabelledCheckBox';\nimport { QuestionTable } from './components/QuestionTable';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { generateRows } from './components/Generator';\n\nconst GlobalCss = withStyles({\n    '@global': {\n        'html, body': {\n            // TODO how do I use the theme for this color? backgroundColor: theme.palette.background.paper\n            backgroundColor: '#f5f5f5',\n        },\n    },\n})(() => null);\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const min = 0;\n    const numberOfRows = 10;\n    const [numberBond, setNumberBond] = useState(10);\n    const [useExactNumberBonds, setUseExactNumberBonds] = useState(true);\n    const [useAddition, setUseAddition] = useState(true);\n    const [useSubtraction, setUseSubtraction] = useState(true);\n    const [rows, setRows] = useState(\n        generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows)\n    );\n\n    const updateNumberBond = (changedNumberBond: number) => {\n        setNumberBond(changedNumberBond);\n    };\n    const updateUseExactNumberBonds = (exactNumberBondsUse: boolean) => {\n        setUseExactNumberBonds(exactNumberBondsUse);\n    };\n    const updateAdditionUse = (additionUse: boolean) => {\n        setUseAddition(additionUse);\n    };\n    const updateSubtractionUse = (subtractionUse: boolean) => {\n        setUseSubtraction(subtractionUse);\n    };\n\n    useEffect(() => {\n        setRows(generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows));\n    }, [min, numberBond, useAddition, useSubtraction, useExactNumberBonds]);\n\n    return (\n        <div className=\"App\">\n            <GlobalCss />\n            <header className=\"App-header\" data-testid=\"header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.control}>\n                            <Grid item>\n                                <LabelledSlider\n                                    label=\"Number Bonds\"\n                                    max={10}\n                                    value={numberBond}\n                                    step={1}\n                                    onChange={updateNumberBond}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <LabelledCheckBox\n                                    name=\"exactNumberBonds\"\n                                    color=\"primary\"\n                                    value={useExactNumberBonds}\n                                    onChange={updateUseExactNumberBonds}\n                                />\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox\n                                    name=\"addition\"\n                                    color=\"primary\"\n                                    value={useAddition}\n                                    onChange={updateAdditionUse}\n                                />\n                            </Paper>\n                        </Grid>\n                        <Grid item>\n                            <Paper className={classes.control}>\n                                <LabelledCheckBox\n                                    name=\"subtraction\"\n                                    color=\"primary\"\n                                    value={useSubtraction}\n                                    onChange={updateSubtractionUse}\n                                />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                    <Grid item />\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                endIcon={<Icon>send</Icon>}\n                                onClick={() => {\n                                    setRows(\n                                        generateRows(\n                                            { min, numberBond, useAddition, useSubtraction, useExactNumberBonds },\n                                            numberOfRows\n                                        )\n                                    );\n                                }}\n                            >\n                                Generate maths fun!\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Paper>\n                            <QuestionTable label=\"Worksheet\" rows={rows} />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}