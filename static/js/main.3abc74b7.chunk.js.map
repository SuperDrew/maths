{"version":3,"sources":["components/LabelledSlider.js","components/LabelledCheckBox.js","components/QuestionGrid.js","styles/styles.js","App.js","serviceWorker.js","index.js"],"names":["LabelledSlider","props","marks","Array","max","keys","map","value","label","toString","Typography","id","gutterBottom","Slider","defaultValue","aria-labelledby","step","valueLabelDisplay","min","LabelledCheckBox","FormControlLabel","control","Checkbox","name","color","labelPlacement","QuestionGrid","randBetween","Math","round","random","generateRandomAdditionSum","createRow","rowNumber","key","sum1","sum2","sum3","rows","i","push","variant","align","Table","TableBody","row","TableRow","TableCell","useStyles","makeStyles","theme","root","width","border","palette","divider","borderRadius","shape","backgroundColor","background","paper","text","secondary","margin","spacing","App","classes","className","Container","maxWidth","Grid","container","Divider","justify","Button","endIcon","Icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3abc74b7.chunk.js","sourcesContent":["import {Slider, Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const LabelledSlider = (props) =>\n{\n    const marks = [...Array(props.max +1).keys()].map((value) => ({value: value, label: value.toString()}))\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                defaultValue={props.defaultValue}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={0}\n                max={props.max}\n                marks={marks}\n            />\n        </>\n    )\n}","import React from \"react\";\nimport {Checkbox, FormControlLabel} from \"@material-ui/core\";\n\nexport const LabelledCheckBox = (props) =>\n{\n    return (\n        <>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        name={props.name}\n                        color={props.color}\n                    />\n                }\n                label={props.name}\n                labelPlacement=\"start\"\n            />\n        </>\n    )\n}","import {Table, TableBody, TableCell, TableRow, Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const QuestionGrid = (props) =>\n{\n    const min = props.min;\n    const max = props.max;\n\n    function randBetween(min, max) {\n        return Math.round(Math.random()*(max-min)+min);\n    }\n\n    function generateRandomAdditionSum(min, max) {\n        return `${randBetween(min, max)} + ${randBetween(min, max)} = [    ]`;\n    }\n\n    function createRow(min, max, rowNumber) {\n        return {\n            key: rowNumber,\n            sum1: generateRandomAdditionSum(min,max),\n            sum2: generateRandomAdditionSum(min,max),\n            sum3: generateRandomAdditionSum(min,max)\n        };\n    }\n\n    const rows = [];\n    for (let i = 0; i <= 10; i++) {\n        rows.push(createRow(min, max, i))\n    }\n\n    return (\n        <>\n            <Typography variant=\"h2\" id=\"discrete-slider-custom\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table>\n                <TableBody>\n                    {rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"right\">{row.sum1}</TableCell>\n                            <TableCell align=\"right\">{row.sum2}</TableCell>\n                            <TableCell align=\"right\">{row.sum3}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    )\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        width: 'fit-content',\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.secondary,\n        '& svg': {\n            margin: theme.spacing(1.5),\n        },\n        '& hr': {\n            margin: theme.spacing(0, 0.5),\n        }\n    },\n}));","import React from 'react';\nimport './reset.css';\nimport Button from '@material-ui/core/Button';\nimport {Container, Divider, Grid, Icon, Typography} from \"@material-ui/core\";\nimport {LabelledSlider} from \"./components/LabelledSlider\";\nimport {LabelledCheckBox} from \"./components/LabelledCheckBox\";\nimport {QuestionGrid} from \"./components/QuestionGrid\";\nimport {useStyles} from \"./styles/styles\";\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth = \"sm\">\n                <div>\n                    <LabelledSlider label=\"minimum\" max={10} defaultValue={0} step={1}/>\n                    <LabelledSlider label=\"maximum\" max={10} defaultValue={0} step={1}/>\n                </div>\n                <Grid container className={classes.root}>\n                    <LabelledCheckBox name=\"addition\" color=\"primary\"/>\n                    <LabelledCheckBox name=\"subtraction\" color=\"primary\"/>\n                </Grid>\n                <Divider variant=\"middle\"/>\n                <Grid container justify=\"center\">\n                    <Button variant=\"contained\" color=\"primary\" endIcon={<Icon>send</Icon>}>\n                        Generate maths fun!\n                    </Button>\n                </Grid>\n                <QuestionGrid label=\"Questions\" min={0} max={10}/>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}