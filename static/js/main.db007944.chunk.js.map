{"version":3,"sources":["core/operations/Operations.ts","app/components/LabelledSlider.tsx","app/components/QuestionTable.tsx","core/customErrors/CustomErrors.ts","core/generator/OperandsGenerator.ts","core/generator/Generator.ts","app/components/LabelledCheckBox.tsx","app/components/Settings.tsx","app/App.tsx","index.tsx"],"names":["Operations","LabelledSlider","props","marks","Array","max","min","keys","filter","key","map","value","label","toString","Typography","id","gutterBottom","Slider","aria-labelledby","step","valueLabelDisplay","onChange","event","useStyles","makeStyles","table","tableLayout","QuestionTable","classes","variant","align","Table","className","TableBody","rows","row","TableRow","TableCell","sums","NotImplementedError","message","name","Error","pickOperation","operations","Math","floor","random","length","randBetween","round","createOperations","generateProps","useAddition","push","Addition","useSubtraction","Subtraction","generateAOperandBEqualsAnswer","useExactNumberBonds","operation","a","numberBond","b","x","generateRows","numberOfRows","numSumsForWholeGrid","operandsArray","j","sumsArray","operand","operands","uniqueSumsArray","Set","uniqueSumPosition","i","slice","LabelledCheckBox","FormControlLabel","control","Checkbox","color","checked","labelPlacement","padding","Settings","values","items","index","type","Grid","item","Paper","initialValue","TextField","parseInt","target","container","alignItems","justify","spacing","GlobalCss","withStyles","backgroundColor","initialState","App","useState","setNumberBond","maxNumberBond","setMaxNumberBond","setUseExactNumberBonds","setNumberRows","setUseAddition","setUseSubtraction","setRows","useEffect","settings","data-testid","Container","maxWidth","xs","Accordion","AccordionSummary","expandIcon","Icon","AccordionDetails","direction","Button","endIcon","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db007944.chunk.js","sourcesContent":["enum Operations {\n    Addition = '+',\n    Subtraction = '-',\n}\n\nexport { Operations };\n","import { Slider, Typography } from '@material-ui/core';\nimport React from 'react';\n\ninterface LabelledSliderProps {\n    min: number;\n    max: number;\n    label: string;\n    value: number;\n    step: number;\n    onChange(amount: number): void;\n}\n\nexport const LabelledSlider = (props: LabelledSliderProps) => {\n    const marks = [...Array(props.max - props.min + 2).keys()]\n        .filter((key) => key >= props.min)\n        .map((value) => ({\n            value: value,\n            label: value.toString(),\n        }));\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                value={props.value}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={props.min}\n                max={props.max}\n                marks={marks}\n                onChange={(event, value) => {\n                    props.onChange(value as number);\n                }}\n            />\n        </>\n    );\n};\n","import { Table, TableBody, TableCell, TableRow, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Row } from '../../core/generator/Generator';\n\nconst useStyles = makeStyles(() => ({\n    table: {\n        tableLayout: 'fixed',\n    },\n}));\n\ninterface QuestionTableProps {\n    label: string;\n    rows: Row[];\n}\n\nexport const QuestionTable = (props: QuestionTableProps) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Typography variant=\"h4\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table className={classes.table}>\n                <TableBody>\n                    {props.rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"center\">{row.sums[0]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[1]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[2]}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    );\n};\n","class NotImplementedError extends Error {\n    constructor(message: string) {\n        super(`Not implemented yet: ${message}`);\n        this.name = 'NotImplementedError';\n    }\n}\n\nexport { NotImplementedError };\n","import { Operations } from '../operations/Operations';\nimport { GenerateProps } from './Generator';\nimport { NotImplementedError } from '../customErrors/CustomErrors';\n\ntype Answer = '___';\ntype NumberOrAnswer = number | Answer;\n\ninterface Operands {\n    a: NumberOrAnswer;\n    operation: Operations;\n    b: NumberOrAnswer;\n    x: NumberOrAnswer;\n}\n\nconst pickOperation = (operations: Operations[]) => {\n    return operations[Math.floor(Math.random() * operations.length)];\n};\n\nconst randBetween = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nfunction createOperations(generateProps: GenerateProps) {\n    const operations = [];\n    if (generateProps.useAddition) {\n        operations.push(Operations.Addition);\n    }\n    if (generateProps.useSubtraction) {\n        operations.push(Operations.Subtraction);\n    }\n    return operations;\n}\n\nconst generateAOperandAnswerEqualsX = (generateProps: GenerateProps): Operands => {\n    const a = randBetween(generateProps.min, generateProps.numberBond);\n    const operation = pickOperation(createOperations(generateProps));\n    const x = operation === Operations.Addition ? randBetween(a, generateProps.numberBond) : randBetween(0, a);\n    return { a, operation, b: '___', x };\n};\n\nconst generateAOperandBEqualsAnswer = (generateProps: GenerateProps): Operands => {\n    if (generateProps.useExactNumberBonds) {\n        const operation = pickOperation(createOperations(generateProps));\n        if (operation === Operations.Subtraction) {\n            const a = generateProps.numberBond;\n            const b = randBetween(generateProps.min, generateProps.numberBond);\n            return { a, operation, b, x: '___' };\n        }\n        if (operation === Operations.Addition) {\n            const a = randBetween(generateProps.min, generateProps.numberBond);\n            const b = generateProps.numberBond - a;\n            return { a, operation, b, x: '___' };\n        }\n        throw new NotImplementedError(operation);\n    }\n    const a = randBetween(generateProps.min, generateProps.numberBond);\n    const operation = pickOperation(createOperations(generateProps));\n    const b =\n        operation === Operations.Addition\n            ? randBetween(generateProps.min, generateProps.numberBond - a)\n            : randBetween(0, a);\n    return { a, operation, b, x: '___' };\n};\n\nexport type { Operands };\nexport { generateAOperandBEqualsAnswer, generateAOperandAnswerEqualsX, randBetween, pickOperation };\n","import { generateAOperandBEqualsAnswer, Operands } from './OperandsGenerator';\n\nconst numberOfColumns = 3;\nconst generationFactorForUniqueness = 4;\n\ninterface Row {\n    key: number;\n    sums: string[];\n}\n\ninterface GenerateProps {\n    min: number;\n    numberBond: number;\n    useAddition: boolean;\n    useSubtraction: boolean;\n    useExactNumberBonds: boolean;\n}\n\nconst transformOperandsIntoSum = (operands: Operands) =>\n    `${operands.a} ${operands.operation} ${operands.b} = ${operands.x}`;\n\nconst generateRows = (generateProps: GenerateProps, numberOfRows: number): Row[] => {\n    if (!generateProps.useSubtraction && !generateProps.useAddition) {\n        return [];\n    }\n\n    const numSumsForWholeGrid = numberOfRows * numberOfColumns;\n    let operandsArray: Operands[] = [];\n    for (let j = 0; j < numSumsForWholeGrid * generationFactorForUniqueness; j++) {\n        operandsArray.push(generateAOperandBEqualsAnswer(generateProps));\n    }\n    const sumsArray: string[] = operandsArray.map<string>((operand) => {\n        return transformOperandsIntoSum(operand);\n    });\n\n    const uniqueSumsArray: string[] = [...new Set<string>(sumsArray)];\n    const rows = [];\n    let uniqueSumPosition = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n        if (uniqueSumPosition > uniqueSumsArray.length) {\n            break;\n        }\n        rows.push({ key: i, sums: uniqueSumsArray.slice(uniqueSumPosition, uniqueSumPosition + numberOfColumns) });\n        uniqueSumPosition += numberOfColumns;\n    }\n\n    return rows;\n};\n\nexport type { GenerateProps, Row };\nexport { generateRows };\n","import React from 'react';\nimport { Checkbox, CheckboxProps, FormControlLabel } from '@material-ui/core';\n\ninterface LabelledCheckBoxProps {\n    name: string;\n    color: CheckboxProps['color'];\n    value: boolean;\n    onChange(checked: boolean): void;\n}\nexport const LabelledCheckBox = (props: LabelledCheckBoxProps) => {\n    return (\n        <>\n            <FormControlLabel\n                control={<Checkbox name={props.name} color={props.color} checked={props.value} />}\n                label={props.name}\n                labelPlacement=\"end\"\n                onChange={(event, checked) => props.onChange(checked)}\n            />\n        </>\n    );\n};\n","import { Grid, Paper, TextField } from '@material-ui/core';\nimport { LabelledCheckBox } from './LabelledCheckBox';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\n\nexport type Setting = NumberSetting | BooleanSetting;\nexport interface NumberSetting {\n    name: string;\n    initialValue: number;\n    onChange: (newValue: number) => void;\n    type: 'number'\n}\n\nexport interface BooleanSetting {\n    name: string;\n    initialValue: boolean;\n    onChange: (newValue: boolean) => void;\n    type: 'checkbox'\n}\n\ninterface SettingsProps<T> {\n    values: Setting[]\n}\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nexport const Settings = <T, >({ values }: SettingsProps<T>) => {\n    const classes = useStyles();\n    const items = values.map((value, index) => {\n        if (value.type === 'checkbox') {\n            return <Grid item key={index}>\n                <Paper className={classes.control}>\n                    <LabelledCheckBox\n                        name={value.name}\n                        color='primary'\n                        value={value.initialValue}\n                        onChange={value.onChange}\n                    />\n                </Paper>\n            </Grid>;\n        } else {\n            return <Grid item key={index}>\n                <Paper className={classes.control}>\n                    <TextField\n                        type='number'\n                        label={value.name}\n                        variant='standard'\n                        value={value.initialValue}\n                        onChange={(event) => value.onChange(parseInt(event.target.value))}\n                    />\n                </Paper>\n            </Grid>;\n        }\n\n    });\n    return (\n        <Grid container alignItems={'center'} justify='center' spacing={2}>\n            {items}\n        </Grid>);\n};\n","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Container,\n    Grid,\n    Icon,\n    Paper,\n    Typography\n} from '@material-ui/core';\nimport { LabelledSlider } from './components/LabelledSlider';\nimport { QuestionTable } from './components/QuestionTable';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { generateRows } from '../core/generator/Generator';\nimport { Setting, Settings } from './components/Settings';\n\nconst GlobalCss = withStyles({\n    '@global': {\n        'html, body': {\n            // TODO how do I use the theme for this color? backgroundColor: theme.palette.background.paper\n            backgroundColor: '#f5f5f5',\n        },\n    },\n})(() => null);\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nconst initialState = {\n    numberBonds: 10,\n    maxNumberBond: 20,\n    useExactNumberBonds: true,\n    numberOfRows: 5,\n    useAddition: true,\n    useSubtraction: true,\n};\n\nfunction App() {\n    const classes = useStyles();\n    const min = 0;\n    const [numberBond, setNumberBond] = useState(initialState.numberBonds);\n    const [maxNumberBond, setMaxNumberBond] = useState(initialState.maxNumberBond);\n    const [useExactNumberBonds, setUseExactNumberBonds] = useState(initialState.useExactNumberBonds);\n    const [numberOfRows, setNumberRows] = useState(initialState.numberOfRows);\n    const [useAddition, setUseAddition] = useState(initialState.useAddition);\n    const [useSubtraction, setUseSubtraction] = useState(initialState.useSubtraction);\n    const [rows, setRows] = useState(\n        generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows)\n    );\n\n    useEffect(() => {\n        setRows(generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows));\n    }, [min, numberBond, numberOfRows, useAddition, useSubtraction, useExactNumberBonds]);\n\n    const settings: Setting[] = [\n        {\n            initialValue: useExactNumberBonds,\n            name: \"Use exact Number Bonds\",\n            type: 'checkbox',\n            onChange: setUseExactNumberBonds\n        },\n        {\n            initialValue: maxNumberBond,\n            name: \"Maximum Number Bonds\",\n            type: 'number',\n            onChange: setMaxNumberBond\n        },\n        {\n            initialValue: numberOfRows,\n            name: \"number of rows\",\n            type: 'number',\n            onChange: setNumberRows\n        },\n        {\n            initialValue: useAddition,\n            name: \"addition\",\n            type: 'checkbox',\n            onChange: setUseAddition\n        },\n        {\n            initialValue: useSubtraction,\n            name: \"subtraction\",\n            type: 'checkbox',\n            onChange: setUseSubtraction\n        },\n    ]\n    return (\n        <div className=\"App\">\n            <GlobalCss />\n            <header className=\"App-header\" data-testid=\"header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.control}>\n                            <Grid item>\n                                <LabelledSlider\n                                    label=\"Number Bonds\"\n                                    min={1}\n                                    max={maxNumberBond}\n                                    value={numberBond}\n                                    step={1}\n                                    onChange={setNumberBond}\n                                />\n                            </Grid>\n                            <Accordion>\n                                <AccordionSummary expandIcon={<Icon>expand_more</Icon>}>\n                                    <Typography>Settings</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Settings values={settings}/>\n                                </AccordionDetails>\n                            </Accordion>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item />\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                endIcon={<Icon>refresh</Icon>}\n                                onClick={() => {\n                                    setRows(\n                                        generateRows(\n                                            { min, numberBond, useAddition, useSubtraction, useExactNumberBonds },\n                                            numberOfRows\n                                        )\n                                    );\n                                }}\n                            >\n                                Generate another worksheet\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Paper>\n                            <QuestionTable label=\"Worksheet\" rows={rows} />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}