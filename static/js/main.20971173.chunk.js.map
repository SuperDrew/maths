{"version":3,"sources":["core/operations/Operations.ts","app/components/LabelledSlider.tsx","app/components/QuestionTable.tsx","core/customErrors/CustomErrors.ts","core/generator/OperandsGenerator.ts","core/generator/Generator.ts","app/components/LabelledCheckBox.tsx","app/components/Settings.tsx","app/App.tsx","index.tsx"],"names":["Operations","LabelledSlider","props","marks","Array","max","min","keys","filter","key","map","value","label","toString","Typography","id","gutterBottom","Slider","aria-labelledby","step","valueLabelDisplay","onChange","event","useStyles","makeStyles","table","tableLayout","QuestionTable","classes","variant","align","Table","className","TableBody","rows","row","TableRow","TableCell","sums","NotImplementedError","message","name","Error","pickRandomElementInArray","array","Math","floor","random","length","pickOperation","operations","randBetween","round","createOperations","generateProps","useAddition","push","Addition","useSubtraction","Subtraction","arrayOfSumGenerators","a","b","operation","useExactNumberBonds","numberBond","x","generateRows","numberOfRows","numSumsForWholeGrid","operandsArray","j","sumsArray","operand","operands","uniqueSumsArray","Set","uniqueSumPosition","i","slice","LabelledCheckBox","FormControlLabel","control","Checkbox","color","checked","labelPlacement","padding","Settings","values","items","index","type","Grid","item","Paper","initialValue","TextField","parseInt","target","container","alignItems","justify","spacing","GlobalCss","withStyles","backgroundColor","initialState","App","useState","setNumberBond","maxNumberBond","setMaxNumberBond","setUseExactNumberBonds","setNumberRows","setUseAddition","setUseSubtraction","setRows","useEffect","settings","data-testid","Container","maxWidth","xs","Accordion","AccordionSummary","expandIcon","Icon","AccordionDetails","direction","Button","endIcon","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20971173.chunk.js","sourcesContent":["enum Operations {\n    Addition = '+',\n    Subtraction = '-',\n}\n\nexport { Operations };\n","import { Slider, Typography } from '@material-ui/core';\nimport React from 'react';\n\ninterface LabelledSliderProps {\n    min: number;\n    max: number;\n    label: string;\n    value: number;\n    step: number;\n    onChange(amount: number): void;\n}\n\nexport const LabelledSlider = (props: LabelledSliderProps) => {\n    const marks = [...Array(props.max - props.min + 2).keys()]\n        .filter((key) => key >= props.min)\n        .map((value) => ({\n            value: value,\n            label: value.toString(),\n        }));\n\n    return (\n        <>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n                {props.label}\n            </Typography>\n            <Slider\n                id={props.label}\n                value={props.value}\n                aria-labelledby=\"discrete-slider-custom\"\n                step={props.step}\n                valueLabelDisplay=\"off\"\n                min={props.min}\n                max={props.max}\n                marks={marks}\n                onChange={(event, value) => {\n                    props.onChange(value as number);\n                }}\n            />\n        </>\n    );\n};\n","import { Table, TableBody, TableCell, TableRow, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Row } from '../../core/generator/Generator';\n\nconst useStyles = makeStyles(() => ({\n    table: {\n        tableLayout: 'fixed',\n    },\n}));\n\ninterface QuestionTableProps {\n    label: string;\n    rows: Row[];\n}\n\nexport const QuestionTable = (props: QuestionTableProps) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Typography variant=\"h4\" gutterBottom align=\"center\">\n                {props.label}\n            </Typography>\n            <Table className={classes.table}>\n                <TableBody>\n                    {props.rows.map((row) => (\n                        <TableRow key={row.key}>\n                            <TableCell align=\"center\">{row.sums[0]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[1]}</TableCell>\n                            <TableCell align=\"center\">{row.sums[2]}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </>\n    );\n};\n","class NotImplementedError extends Error {\n    constructor(message: string) {\n        super(`Not implemented yet: ${message}`);\n        this.name = 'NotImplementedError';\n    }\n}\n\nexport { NotImplementedError };\n","import { Operations } from '../operations/Operations';\nimport { GenerateProps } from './Generator';\nimport { NotImplementedError } from '../customErrors/CustomErrors';\n\ntype Answer = '___';\ntype NumberOrAnswer = number | Answer;\n\ninterface Operands {\n    a: NumberOrAnswer;\n    operation: Operations;\n    b: NumberOrAnswer;\n    x: NumberOrAnswer;\n}\n\nconst pickRandomElementInArray = <T>(array: Array<T>): T => {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nconst pickOperation = (operations: Operations[]) => {\n    return pickRandomElementInArray(operations);\n};\n\nconst randBetween = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nfunction createOperations(generateProps: GenerateProps) {\n    const operations = [];\n    if (generateProps.useAddition) {\n        operations.push(Operations.Addition);\n    }\n    if (generateProps.useSubtraction) {\n        operations.push(Operations.Subtraction);\n    }\n    return operations;\n}\n\nconst generateAOperandAnswerEqualsX = (generateProps: GenerateProps): Operands => {\n    const operation = pickOperation(createOperations(generateProps));\n    let a: NumberOrAnswer;\n    let x: NumberOrAnswer;\n    if (generateProps.useExactNumberBonds) {\n        // TODO this is dumb, for exactNumberBonds and subtraction it will always generate <numberBond> - 0 = <numberbond>\n        a = operation === Operations.Addition ? randBetween(generateProps.min, generateProps.numberBond) : generateProps.numberBond;\n        x = generateProps.numberBond\n    }\n    else {\n        a = randBetween(generateProps.min, generateProps.numberBond);\n        x = operation === Operations.Addition ? randBetween(a, generateProps.numberBond) : randBetween(0, a);\n    }\n    return { a, operation, b: '___', x };\n};\n\nconst generateAOperandBEqualsAnswer = (generateProps: GenerateProps): Operands => {\n    const operation = pickOperation(createOperations(generateProps));\n    let a: NumberOrAnswer;\n    let b: NumberOrAnswer;\n    if (generateProps.useExactNumberBonds) {\n        if (operation === Operations.Subtraction) {\n            a = generateProps.numberBond;\n            b = randBetween(generateProps.min, generateProps.numberBond);\n        }\n        else if (operation === Operations.Addition) {\n            a = randBetween(generateProps.min, generateProps.numberBond);\n            b = generateProps.numberBond - a;\n        }\n        else {\n            throw new NotImplementedError(operation);\n        }\n    }\n    else {\n        a = randBetween(generateProps.min, generateProps.numberBond);\n        b =\n            operation === Operations.Addition\n                ? randBetween(generateProps.min, generateProps.numberBond - a)\n                : randBetween(0, a);\n    }\n    return { a, operation, b, x: '___' };\n};\n\nexport type { Operands };\nexport { generateAOperandBEqualsAnswer, generateAOperandAnswerEqualsX, randBetween, pickRandomElementInArray, pickOperation };\n","import {\n    generateAOperandAnswerEqualsX,\n    generateAOperandBEqualsAnswer,\n    Operands,\n    pickRandomElementInArray\n} from './OperandsGenerator';\n\nconst numberOfColumns = 3;\nconst generationFactorForUniqueness = 4;\n\ninterface Row {\n    key: number;\n    sums: string[];\n}\n\ninterface GenerateProps {\n    min: number;\n    numberBond: number;\n    useAddition: boolean;\n    useSubtraction: boolean;\n    useExactNumberBonds: boolean;\n}\n\nconst transformOperandsIntoSum = (operands: Operands) =>\n    `${operands.a} ${operands.operation} ${operands.b} = ${operands.x}`;\n\nconst arrayOfSumGenerators = [generateAOperandBEqualsAnswer, generateAOperandAnswerEqualsX];\n\nconst generateRows = (generateProps: GenerateProps, numberOfRows: number): Row[] => {\n    if (!generateProps.useSubtraction && !generateProps.useAddition) {\n        return [];\n    }\n\n    const numSumsForWholeGrid = numberOfRows * numberOfColumns;\n    let operandsArray: Operands[] = [];\n    for (let j = 0; j < numSumsForWholeGrid * generationFactorForUniqueness; j++) {\n        operandsArray.push(pickRandomElementInArray(arrayOfSumGenerators)(generateProps));\n        //operandsArray.push(generateAOperandBEqualsAnswer(generateProps));\n        //operandsArray.push(generateAOperandAnswerEqualsX(generateProps));\n    }\n    const sumsArray: string[] = operandsArray.map<string>((operand) => {\n        return transformOperandsIntoSum(operand);\n    });\n\n    const uniqueSumsArray: string[] = [...new Set<string>(sumsArray)];\n    const rows = [];\n    let uniqueSumPosition = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n        if (uniqueSumPosition > uniqueSumsArray.length) {\n            break;\n        }\n        rows.push({ key: i, sums: uniqueSumsArray.slice(uniqueSumPosition, uniqueSumPosition + numberOfColumns) });\n        uniqueSumPosition += numberOfColumns;\n    }\n\n    return rows;\n};\n\nexport type { GenerateProps, Row };\nexport { generateRows };\n","import React from 'react';\nimport { Checkbox, CheckboxProps, FormControlLabel } from '@material-ui/core';\n\ninterface LabelledCheckBoxProps {\n    name: string;\n    color: CheckboxProps['color'];\n    value: boolean;\n    onChange(checked: boolean): void;\n}\nexport const LabelledCheckBox = (props: LabelledCheckBoxProps) => {\n    return (\n        <>\n            <FormControlLabel\n                control={<Checkbox name={props.name} color={props.color} checked={props.value} />}\n                label={props.name}\n                labelPlacement=\"end\"\n                onChange={(event, checked) => props.onChange(checked)}\n            />\n        </>\n    );\n};\n","import { Grid, Paper, TextField } from '@material-ui/core';\nimport { LabelledCheckBox } from './LabelledCheckBox';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\n\nexport type Setting = NumberSetting | BooleanSetting;\nexport interface NumberSetting {\n    name: string;\n    initialValue: number;\n    onChange: (newValue: number) => void;\n    type: 'number'\n}\n\nexport interface BooleanSetting {\n    name: string;\n    initialValue: boolean;\n    onChange: (newValue: boolean) => void;\n    type: 'checkbox'\n}\n\ninterface SettingsProps<T> {\n    values: Setting[]\n}\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nexport const Settings = <T, >({ values }: SettingsProps<T>) => {\n    const classes = useStyles();\n    const items = values.map((value, index) => {\n        if (value.type === 'checkbox') {\n            return <Grid item key={index}>\n                <Paper className={classes.control}>\n                    <LabelledCheckBox\n                        name={value.name}\n                        color='primary'\n                        value={value.initialValue}\n                        onChange={value.onChange}\n                    />\n                </Paper>\n            </Grid>;\n        } else {\n            return <Grid item key={index}>\n                <Paper className={classes.control}>\n                    <TextField\n                        type='number'\n                        label={value.name}\n                        variant='standard'\n                        value={value.initialValue}\n                        onChange={(event) => value.onChange(parseInt(event.target.value))}\n                    />\n                </Paper>\n            </Grid>;\n        }\n\n    });\n    return (\n        <Grid container alignItems={'center'} justify='center' spacing={2}>\n            {items}\n        </Grid>);\n};\n","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Container,\n    Grid,\n    Icon,\n    Paper,\n    Typography\n} from '@material-ui/core';\nimport { LabelledSlider } from './components/LabelledSlider';\nimport { QuestionTable } from './components/QuestionTable';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { generateRows } from '../core/generator/Generator';\nimport { Setting, Settings } from './components/Settings';\n\nconst GlobalCss = withStyles({\n    '@global': {\n        'html, body': {\n            // TODO how do I use the theme for this color? backgroundColor: theme.palette.background.paper\n            backgroundColor: '#f5f5f5',\n        },\n    },\n})(() => null);\n\nconst useStyles = makeStyles(() => ({\n    control: {\n        padding: 10,\n    },\n}));\n\nconst initialState = {\n    numberBonds: 10,\n    maxNumberBond: 20,\n    useExactNumberBonds: true,\n    numberOfRows: 5,\n    useAddition: true,\n    useSubtraction: true,\n};\n\nfunction App() {\n    const classes = useStyles();\n    const min = 0;\n    const [numberBond, setNumberBond] = useState(initialState.numberBonds);\n    const [maxNumberBond, setMaxNumberBond] = useState(initialState.maxNumberBond);\n    const [useExactNumberBonds, setUseExactNumberBonds] = useState(initialState.useExactNumberBonds);\n    const [numberOfRows, setNumberRows] = useState(initialState.numberOfRows);\n    const [useAddition, setUseAddition] = useState(initialState.useAddition);\n    const [useSubtraction, setUseSubtraction] = useState(initialState.useSubtraction);\n    const [rows, setRows] = useState(\n        generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows)\n    );\n\n    useEffect(() => {\n        setRows(generateRows({ min, numberBond, useAddition, useSubtraction, useExactNumberBonds }, numberOfRows));\n    }, [min, numberBond, numberOfRows, useAddition, useSubtraction, useExactNumberBonds]);\n\n    const settings: Setting[] = [\n        {\n            initialValue: useExactNumberBonds,\n            name: \"Use exact Number Bonds\",\n            type: 'checkbox',\n            onChange: setUseExactNumberBonds\n        },\n        {\n            initialValue: maxNumberBond,\n            name: \"Maximum Number Bonds\",\n            type: 'number',\n            onChange: setMaxNumberBond\n        },\n        {\n            initialValue: numberOfRows,\n            name: \"number of rows\",\n            type: 'number',\n            onChange: setNumberRows\n        },\n        {\n            initialValue: useAddition,\n            name: \"addition\",\n            type: 'checkbox',\n            onChange: setUseAddition\n        },\n        {\n            initialValue: useSubtraction,\n            name: \"subtraction\",\n            type: 'checkbox',\n            onChange: setUseSubtraction\n        },\n    ]\n    return (\n        <div className=\"App\">\n            <GlobalCss />\n            <header className=\"App-header\" data-testid=\"header\">\n                <Typography variant=\"h1\" align=\"center\">\n                    Maths\n                </Typography>\n            </header>\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.control}>\n                            <Grid item>\n                                <LabelledSlider\n                                    label=\"Number Bonds\"\n                                    min={1}\n                                    max={maxNumberBond}\n                                    value={numberBond}\n                                    step={1}\n                                    onChange={setNumberBond}\n                                />\n                            </Grid>\n                            <Accordion>\n                                <AccordionSummary expandIcon={<Icon>expand_more</Icon>}>\n                                    <Typography>Settings</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Settings values={settings}/>\n                                </AccordionDetails>\n                            </Accordion>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item />\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                endIcon={<Icon>refresh</Icon>}\n                                onClick={() => {\n                                    setRows(\n                                        generateRows(\n                                            { min, numberBond, useAddition, useSubtraction, useExactNumberBonds },\n                                            numberOfRows\n                                        )\n                                    );\n                                }}\n                            >\n                                Generate another worksheet\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Paper>\n                            <QuestionTable label=\"Worksheet\" rows={rows} />\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}